name: "Manual test"

# Allows running a Go query against the dsp-testing/qc-demo-github-certstore
# test repo. Only works for that repo as it relies on a repository secret.
# Can be triggered on test branches to test changes.

# The Actions UI doesn't handle newlines in the inputs at all, so this
# cannot be reliably triggered from the UI. For best results use the API.
# e.g. curl https://api.github.com/repos/dsp-testing/qc-run2/actions/workflows/manual-test.yml/dispatches -X POST -d '{"ref":"my-branch", "inputs": {"query": "my query"}}'

on:
  workflow_dispatch:
    inputs:
      query:
        default: |
          import go
          from File f select f

jobs:
  run-query:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    # This might not be the cleanest way to get hold of CodeQL but it's reliable
    # and widely used. The ugly part is that is initialises a database of the
    # given language that we just ignore.
    - name: Initialize CodeQL
      id: init
      uses: github/codeql-action/init@v1
      with:
        languages: "go"

    - name: Run query
      uses: ./query
      with:
        query: ${{ github.event.inputs.query }}
        language: "go"
        repositories: "[{\"id\": 376068344, \"nwo\": \"dsp-testing/qc-demo-github-certstore\", \"pat\": \"${{ secrets.BOT_TOKEN }}\"}]"
        codeql: ${{ steps.init.outputs.codeql-path }}

  combine-results:
    runs-on: ubuntu-latest
    needs:
    - run-query

    steps:
    - uses: actions/checkout@v2

    - name: Combine results
      uses: ./combine-results
      with:
        query: ${{ github.event.inputs.query }}
        language: "go"
        token: ${{ secrets.GITHUB_TOKEN }}
